// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id String @id @default(cuid()) 
  clerkId String @unique
  email String @unique
  firstname String?
  lastname String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  subscription Subscription?
  automations Automation[]
  integrations Integrations[]


}

model Subscription {
  id String @id @default(cuid())
  plan SUBSCRIPTION_PLAN @default(FREE)
  userId  String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  customerId String? @unique
  User User? @relation(fields: [userId],references: [id],onDelete: Cascade)

}

model Automation {
  id String @id @default(cuid())
  name String
  userId String?
  active Boolean @default(false)
  trigger Trigger[]
  action Action[]
  posts Post[]
  dms Dms[]
  keywords Keyword[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model Dms {
  id String @id @default(cuid())
  automationId String? 
  senderId String?
  receiver String?
  message String?

  Automation Automation? @relation(fields: [automationId],references: [id])
}

model Post {
  id String @id @default(cuid())
  postId String
  caption String?
  media String
  mediaType MEDIATYPE @default(IMAGE)
  automationId String

  Automation Automation @relation(fields: [automationId],references: [id],onDelete: Cascade)
}


model Integrations {
  id String @id @default(cuid())
  name INTEGRATIONS @default(INSTAGRAM)
  userId String
  token String @unique
  expiresAt DateTime? 
  instagramId String? @unique

  createdAt DateTime @default(now())
  User User? @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model Trigger {
  id String @id @default(cuid())
  type String
  automationId String? 
  Automation Automation? @relation(fields: [automationId],references: [id])
}

model Action {
  id String @id @default(cuid())
  automationId String
  actions ACTIONS @default(MESSAGE)
  prompt String
  commentReply String?
  dmCount Int @default(0)
  commentCount Int @default(0)

  Automation Automation @relation(fields: [automationId],references: [id],onDelete: Cascade)
}

model Keyword {
  id           String      @id @default(cuid())
  word         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     

  @@unique([automationId, word]) 
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum ACTIONS {
  SMARTAI
  MESSAGE
}